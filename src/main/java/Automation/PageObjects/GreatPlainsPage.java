package Automation.PageObjects;

import Automation.Utilities.SeleniumUtils;
import io.cucumber.datatable.DataTable;
import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;

import java.util.List;

public class GreatPlainsPage extends SeleniumUtils {

    String mnuFileManagement = "//div[contains(text(),'File Management')]";
    String mnuGreatPlains = "(//div[normalize-space(text())='Great Plains'])[1]";
    String tabGreatPlains = "(//div[normalize-space(text())='Great Plains'])[2]";
    String tabGenerated = "//button[@class='nav-link active']";
    String lstGeneratedColumnFields = "//div[@id='nav-generated-details']//span[@class='ag-header-cell-text']";
    String lstGeneratedColumnFieldsSearchBoxes = "//div[@id='nav-generated-details']//span[@class='ag-header-cell-text']//following::div[1]//input[@type='text']";
    String lstGeneratedPageBar = "//div[@id='nav-generated-details']//span[@class='ag-paging-description']";
    String lstGeneratedRecordsBar = "//div[@id='nav-generated-details']//span[@class='ag-paging-row-summary-panel']";
    String txtGeneratedFileName = "//div[@id='nav-generated-details']//input[@aria-label='File Name Filter Input']";
    String txtGeneratedTypeOfClaim = "//div[@id='nav-generated-details']//input[@aria-label='Type of Claim Filter Input']";
    String txtGeneratedBy = "//div[@id='nav-generated-details']//input[@aria-label='Generated By Filter Input']";
    String txtGeneratedOn = "//div[@id='nav-generated-details']//input[@aria-label='Generated On Filter Input']";
    String txtGeneratedBatchesCount = "//div[@id='nav-generated-details']//input[@aria-label='Batches Count Filter Input']";
    String eleGeneratedFileName = "(//div[@id='nav-generated-details']//div[@col-id='fileName']//span[@class='ag-cell-value'])[1]";
    String eleGeneratedTypeOfClaim = "(//div[@id='nav-generated-details']//div[@col-id='claimType']//span[@class='ag-cell-value'])[1]";
    String eleGeneratedBy = "(//div[@id='nav-generated-details']//div[@col-id='username']//span[@class='ag-cell-value'])[1]";
    String eleGeneratedOn = "(//div[@id='nav-generated-details']//div[@col-id='dateOfEntry']//span[@class='ag-cell-value'])[1]";
    String eleGeneratedBatchesCount = "(//div[@id='nav-generated-details']//div[@col-id='batchCount']//span[@class='ag-cell-value'])[1]";

    String tabTranslated = "//button[@id='nav-translated-details-tab']";
    String lstTranslatedColumnFields = "//div[@id='nav-translated-details']//span[@class='ag-header-cell-text']";
    String lstTranslatedColumnFieldsSearchBoxes = "//div[@id='nav-translated-details']//span[@class='ag-header-cell-text']//following::div[1]//input[@type='text']";
    String lstTranslatedPageBar = "//div[@id='nav-translated-details']//span[@class='ag-paging-description']";
    String lstTranslatedRecordsBar = "//div[@id='nav-translated-details']//span[@class='ag-paging-row-summary-panel']";
    String txtTranslatedFileName = "//div[@id='nav-translated-details']//input[@aria-label='File Name Filter Input']";
    String txtTranslatedTypeOfClaim = "//div[@id='nav-translated-details']//input[@aria-label='Type of Claim Filter Input']";
    String txtUploadedBy = "//div[@id='nav-translated-details']//input[@aria-label='Uploaded By Filter Input']";
    String txtUploadedOn = "//div[@id='nav-translated-details']//input[@aria-label='Uploaded On Filter Input']";
    String txtTranslatedBatchesCount = "//div[@id='nav-translated-details']//input[@aria-label='Batches Count Filter Input']";
    String eleTranslatedFileName = "(//div[@id='nav-translated-details']//div[@col-id='fileName']//span[@class='ag-cell-value'])[1]";
    String eleTranslatedTypeOfClaim = "(//div[@id='nav-translated-details']//div[@col-id='claimType']//span[@class='ag-cell-value'])[1]";
    String eleUploadedBy = "(//div[@id='nav-translated-details']//div[@col-id='username']//span[@class='ag-cell-value'])[1]";
    String eleUploadedOn = "(//div[@id='nav-translated-details']//div[@col-id='dateOfEntry']//span[@class='ag-cell-value'])[1]";
    String eleTranslatedBatchesCount = "(//div[@id='nav-translated-details']//div[@col-id='batchCount']//span[@class='ag-cell-value'])[1]";

    private static String generatedFileNameRecordExp;
    private static String generatedTypeOfClaimExp;
    private static String generatedByExp;
    private static String generatedOnExp;
    private static String batchesCountExp;
    private static String translatedFileNameRecordExp;
    private static String translatedTypeOfClaimExp;
    private static String uploadedByExp;
    private static String uploadedOnExp;
    private static String translatedBatchesCountExp;

    //    Scenario: Verify user should navigate to 'Generated' tab on clicking Great Plains in Left Navigation menu
    public void verifyUserIsOnGreatPlainsPage(String greatPlainsExp)
    {
        clickElement(mnuFileManagement);
        moveToElement(mnuGreatPlains).perform();
        clickElement(mnuGreatPlains);
        explicitTextToBePresentInElementLocatedWait(By.xpath(tabGreatPlains), 10, "Great Plains");
        String[] greatPlainsTabText = getText(tabGreatPlains).split(" ");
        String greatPlainsAct = greatPlainsTabText[0] + " " + greatPlainsTabText[1];
        printStatementInGreenColor("Great plains tab actual text is", greatPlainsAct);
        Assert.assertEquals(greatPlainsExp, greatPlainsAct);
    }
    public void verifyUserIsOnGeneratedTabByDefault() throws InterruptedException {
        explicitInvisibilityOfElementWithTextWait(By.xpath(tabGenerated), 20, "Generated()");
        clickElement(tabGenerated);
        String generatedText = getAttribute(tabGenerated, "class");
        System.out.println("Generated tab actual text is: " + generatedText);
        printStatementInGreenColor("Generated tab actual text is", generatedText);
        if (generatedText.contains("active"))
        {
            Assert.assertTrue(true);
        }
        else
        {
            Assert.fail("User is not on generated tab by default");
        }
    }

    //    Scenario: Verify column fields in Generated Tab in Great Plains page
    public void verifyColumnFieldsUnderGeneratedTab(DataTable generatedColumnFields)
    {
        List<String> generatedColumnFieldsExp = generatedColumnFields.asList();
        List<String> generatedColumnFieldsAct = findElementsByXpath(lstGeneratedColumnFields)
                .stream().map((element) -> element.getText().trim()).toList();
        printStatementInGreenColor("Generated column fields actual size", generatedColumnFieldsAct.size());
        printStatementInGreenColor("Generated column fields expected size" , generatedColumnFieldsExp.size());
        printStatementInGreenColor("Generated tab actual column fields are" , generatedColumnFieldsAct);
        printStatementInGreenColor("Generated tab expected column fields are" , generatedColumnFieldsExp);
        Assert.assertEquals(generatedColumnFieldsExp, generatedColumnFieldsAct);
    }

    //    Scenario: Verify Search Box should display below on each column in Generated tab
    public void validateGeneratedColumnFieldsSearchBoxes()
    {
        List<WebElement> genericColumnFieldsSearchBoxes = findElementsByXpath(lstGeneratedColumnFieldsSearchBoxes);
        printStatementInGreenColor("Generic search boxes size" , genericColumnFieldsSearchBoxes.size());
        for(WebElement box: genericColumnFieldsSearchBoxes)
        {
            Assert.assertTrue(isDisplayed(box));
        }
    }

    //    Scenario: Verify user should navigate to 'Translated' tab in Great Plains page
    public void clickOnTranslatedTab() throws InterruptedException {
        explicitInvisibilityOfElementWithTextWait(By.xpath(tabTranslated), 10, "Translated()");
        clickElement(tabTranslated);
    }
    public void verifyUserIsOnTranslatedPage(String translatedExp)
    {
        String text = explicitVisibilityOfElementLocatedWaitByXpath(tabTranslated, 5).getText();
        String translatedAct = text.substring(0,text.indexOf("("));
        printStatementInGreenColor("Translated actual text is" , translatedAct);
        Assert.assertEquals(translatedExp, translatedAct);
    }

    //    Scenario: Verify column fields in Translated Tab in Great Plains page
    public void verifyColumnFieldsUnderTranslatedTab(DataTable translatedColumnFields) throws InterruptedException {
        List<String> translatedColumnFieldsExp = translatedColumnFields.asList();
        explicitElementClickableWaitByXpath(lstTranslatedColumnFields, 10);
        List<String> translatedColumnFieldsAct = findElementsByXpath(lstTranslatedColumnFields)
                .stream().map((element) -> element.getText().trim()).toList();
        printStatementInGreenColor("Translated column fields actual size" , translatedColumnFieldsAct.size());
        printStatementInGreenColor("Translated column fields expected size" , translatedColumnFieldsExp.size());
        printStatementInGreenColor("Translated tab actual column fields are" , translatedColumnFieldsAct);
        printStatementInGreenColor("Translated tab expected column fields are" , translatedColumnFieldsExp);
        Assert.assertEquals(translatedColumnFieldsExp, translatedColumnFieldsAct);
    }

    //    Scenario: Verify Search Box should display below on each column in translated tab
    public void validateTranslatedColumnFieldsSearchBoxes()
    {
        List<WebElement> translatedColumnFieldsSearchBoxes = findElementsByXpath(lstTranslatedColumnFieldsSearchBoxes);
        printStatementInGreenColor("Translated search boxes size" , translatedColumnFieldsSearchBoxes.size());
        for(WebElement box: translatedColumnFieldsSearchBoxes)
        {
            explicitElementClickableWait(box, 10);
            Assert.assertTrue(isDisplayed(box));
            System.out.println(isDisplayed(box));
        }
    }

    //    Scenario: Verify user should be able to see the results of rows count next to "Generated" tab name
    public void validateRowCountNextToGeneratedTabName() throws InterruptedException {
        FilesPage generatedCount = new FilesPage();
        generatedCount.validateRowCountNextToFilesTab(tabGenerated, lstGeneratedRecordsBar);
    }

    //    Scenario: Verify user should be able to see the results of rows count next to "Translated" tab name
    public void validateRowCountNextToTranslatedTabName() throws InterruptedException {
        FilesPage translatedCount = new FilesPage();
        translatedCount.validateRowCountNextToFilesTab(tabTranslated, lstTranslatedRecordsBar);
    }

    //    Scenario: Verify user should be able to get results for applying filter on File Name column under generated tab
    public void enterFileNameRecordUnderGeneratedFileNameSearchBox()
    {
        generatedFileNameRecordExp = prop.getProperty("generatedFileNameSearchRecord");
        explicitElementClickableWaitByXpath(txtGeneratedFileName, 10).sendKeys(generatedFileNameRecordExp);
    }
    public void verifyUserAbleToViewGeneratedFileNameRecordsUnderResultsSection()
    {
        explicitTextToBePresentInElementLocatedWait(By.xpath(eleGeneratedFileName), 10, generatedFileNameRecordExp);
        String generatedFileNameRecordAct = getText(eleGeneratedFileName);
        printStatementInGreenColor("Generated file name actual record" , generatedFileNameRecordAct);
        printStatementInGreenColor("Generated file name expected record" , generatedFileNameRecordExp);
        Assert.assertEquals(generatedFileNameRecordExp, generatedFileNameRecordAct);
    }

    //    Scenario: Verify user should be able to get results for applying filter on Type of Claim column under generated tab
    public void enterTypeOfClaimUnderGeneratedTypeOfClaimSearchBox()
    {
        generatedTypeOfClaimExp = prop.getProperty("generatedTypeOfClaim");
        explicitElementClickableWaitByXpath(txtGeneratedTypeOfClaim, 10).sendKeys(generatedTypeOfClaimExp);
    }
    public void verifyUserAbleToViewGeneratedTypeOfClaimUnderResultsSection()
    {
        explicitTextToBePresentInElementLocatedWait(By.xpath(eleGeneratedTypeOfClaim), 10, generatedTypeOfClaimExp);
        String generatedTypeOfClaimAct = getText(eleGeneratedTypeOfClaim);
        printStatementInGreenColor("Generated type of claim actual record" , generatedTypeOfClaimAct);
        printStatementInGreenColor("Generated type of claim expected record" , generatedTypeOfClaimExp);
        Assert.assertEquals(generatedTypeOfClaimExp, generatedTypeOfClaimAct);
    }

    //    Scenario: Verify user should be able to get results for applying filter on Generated By column under generated tab
    public void enterMailIdUnderGeneratedBySearchBox()
    {
        generatedByExp = prop.getProperty("generatedBy");
        explicitElementClickableWaitByXpath(txtGeneratedBy, 10).sendKeys(generatedByExp);
    }
    public void verifyUserAbleToViewMailIdsUnderGeneratedByResultsSection()
    {
        explicitTextToBePresentInElementLocatedWait(By.xpath(eleGeneratedBy), 10, generatedByExp);
        String generatedByAct = getText(eleGeneratedBy);
        printStatementInGreenColor("Generated by actual record" , generatedByAct);
        printStatementInGreenColor("Generated by expected record" , generatedByExp);
        Assert.assertEquals(generatedByExp, generatedByAct);
    }

    //    Scenario: Verify user should be able to get results for applying filter on Created On column under generated tab
    public void enterGeneratedDateUnderGeneratedOnSearchBox()
    {
        generatedOnExp = prop.getProperty("generatedOn");
        explicitElementClickableWaitByXpath(txtGeneratedOn, 10).sendKeys(generatedOnExp);
    }
    public void verifyUserAbleToViewGeneratedDatesUnderGeneratedOnResultsSection()
    {
        explicitTextToBePresentInElementLocatedWait(By.xpath(eleGeneratedOn), 10, generatedOnExp);
        String generatedOnAct = getText(eleGeneratedOn);
        printStatementInGreenColor("Generated on actual record" , generatedOnAct);
        printStatementInGreenColor("Generated on expected record" , generatedOnExp);
        Assert.assertEquals(generatedOnExp, generatedOnAct);
    }

    //    Scenario: Verify user should be able to get results for applying filter on "Batches Count" column under generated tab
    public void enterBatchCountUnderBatchesCountSearchBox()
    {
        batchesCountExp = prop.getProperty("generatedBatchesCount");
        explicitElementClickableWaitByXpath(txtGeneratedBatchesCount, 10).sendKeys(batchesCountExp);
    }
    public void verifyUserAbleToViewBatchCountUnderBatchesCountResultsSection()
    {
        explicitTextToBePresentInElementLocatedWait(By.xpath(eleGeneratedBatchesCount), 10, batchesCountExp);
        String batchesCountAct = getText(eleGeneratedBatchesCount);
        printStatementInGreenColor("Generated batches count actual" , batchesCountAct);
        printStatementInGreenColor("Generated batches count expected" , batchesCountExp);
        Assert.assertEquals(batchesCountExp, batchesCountAct);
    }

    //    Scenario: Verify user should be able to get results for applying filter on "File Name" column under translated tab
    public void enterFileNameRecordUnderTranslatedFileNameSearchBox()
    {
        translatedFileNameRecordExp = prop.getProperty("translatedFileNameSearchRecord");
        explicitElementClickableWaitByXpath(txtTranslatedFileName, 10).sendKeys(translatedFileNameRecordExp);
    }
    public void verifyUserAbleToViewTranslatedFileNameRecordsUnderResultsSection()
    {
        explicitTextToBePresentInElementLocatedWait(By.xpath(eleTranslatedFileName), 10, translatedFileNameRecordExp);
        String translatedFileNameRecordAct = getText(eleTranslatedFileName);
        printStatementInGreenColor("Translated file name actual record" , translatedFileNameRecordAct);
        printStatementInGreenColor("Translated file name expected record" , translatedFileNameRecordExp);
        Assert.assertEquals(translatedFileNameRecordExp, translatedFileNameRecordAct);
    }

    //    Scenario: Verify user should be able to get results for applying filter on "Type of Claim" column under generated tab
    public void enterTypeOfClaimUnderTranslatedTypeOFClaimSearchBox()
    {
        translatedTypeOfClaimExp = prop.getProperty("translatedTypeOfClaim");
        explicitElementClickableWaitByXpath(txtTranslatedTypeOfClaim, 10).sendKeys(translatedTypeOfClaimExp);
    }
    public void verifyUserAbleToViewTranslatedTypeOfClaimUnderResultsSection()
    {
        explicitTextToBePresentInElementLocatedWait(By.xpath(eleTranslatedTypeOfClaim), 10, translatedTypeOfClaimExp);
        String translatedTypeOfClaimAct = getText(eleTranslatedTypeOfClaim);
        printStatementInGreenColor("Translated type of claim actual record" , translatedTypeOfClaimAct);
        printStatementInGreenColor("Translated type of claim expected record" , translatedTypeOfClaimExp);
        Assert.assertEquals(translatedTypeOfClaimExp, translatedTypeOfClaimAct);
    }

    //    Scenario: Verify user should be able to get results for applying filter on "Uploaded By" column under generated tab
    public void enterMailIdUnderUploadedBySearchBox()
    {
        uploadedByExp = prop.getProperty("uploadedBy");
        explicitElementClickableWaitByXpath(txtUploadedBy, 10).sendKeys(uploadedByExp);
    }
    public void verifyUserAbleToViewMailIdsUnderUploadedByResultsSection()
    {

        explicitTextToBePresentInElementLocatedWait(By.xpath(eleUploadedBy), 10, uploadedByExp);
        String uploadedByAct = getText(eleUploadedBy);
        printStatementInGreenColor("Generated by actual record" , uploadedByAct);
        printStatementInGreenColor("Generated by expected record" , uploadedByExp);
        Assert.assertEquals(uploadedByExp, uploadedByAct);
    }

    //    Scenario: Verify user should be able to get results for applying filter on "Uploaded On" column under translated tab
    public void enterUploadedDateUnderUploadedOnSearchBox()
    {
        uploadedOnExp = prop.getProperty("uploadedOn");
        explicitElementClickableWaitByXpath(txtUploadedOn, 10).sendKeys(uploadedOnExp);
    }
    public void verifyUserAbleToViewUploadedDatesUnderUploadedOnResultsSection()
    {
        explicitTextToBePresentInElementLocatedWait(By.xpath(eleUploadedOn), 10, uploadedOnExp);
        String uploadedOnAct = getText(eleUploadedOn);
        printStatementInGreenColor("Uploaded on actual record" , uploadedOnAct);
        printStatementInGreenColor("Uploaded on expected record" , uploadedOnExp);
        Assert.assertEquals(uploadedOnExp, uploadedOnAct);
    }

    //    Scenario: Verify user should be able to get results for applying filter on "Batches Count" column under translated tab
    public void enterTranslatedBatchCountUnderBatchesCountSearchBox()
    {
        translatedBatchesCountExp = prop.getProperty("translatedBatchesCount");
        explicitElementClickableWaitByXpath(txtTranslatedBatchesCount, 10).sendKeys(translatedBatchesCountExp);
    }
    public void verifyUserAbleToViewTranslatedBatchCountUnderBatchesCountResultsSection()
    {
        explicitTextToBePresentInElementLocatedWait(By.xpath(eleTranslatedBatchesCount), 10, translatedBatchesCountExp);
        String translatedBatchesCountAct = getText(eleTranslatedBatchesCount);
        printStatementInGreenColor("Generated batches count actual" , translatedBatchesCountAct);
        printStatementInGreenColor("Generated batches count expected" , translatedBatchesCountAct);
        Assert.assertEquals(translatedBatchesCountExp, translatedBatchesCountAct);
    }

}
